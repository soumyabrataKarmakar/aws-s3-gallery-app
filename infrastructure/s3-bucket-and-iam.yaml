AWSTemplateFormatVersion: '2010-09-09'
Description: 'S3 Bucket and IAM policies for S3 Gallery App'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    Description: 'Environment name (dev, staging, prod)'
    AllowedValues:
      - dev
      - staging
      - prod

  BucketName:
    Type: String
    Description: 'S3 Bucket name (must be globally unique)'
    Default: 's3-gallery-user-files'

Resources:
  # S3 Bucket for user files
  S3GalleryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketName}-${Environment}-${AWS::AccountId}'

      # Versioning
      VersioningConfiguration:
        Status: Enabled

      # Encryption
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true

      # Lifecycle Configuration
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA

          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: GLACIER

      # CORS Configuration
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - ETag
              - x-amz-server-side-encryption
              - x-amz-request-id
              - x-amz-id-2
            MaxAge: 3000

      # Notification Configuration
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref S3BucketLogGroup

      # Public Access Block
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'S3GalleryApp'
        - Key: CreatedBy
          Value: 'CloudFormation'

  # CloudWatch Log Group for S3 access logs
  S3BucketLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${BucketName}-${Environment}'
      RetentionInDays: 30

  # S3 Bucket Policy
  S3GalleryBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3GalleryBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Deny insecure connections
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${S3GalleryBucket.Arn}'
              - !Sub '${S3GalleryBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

          # Deny access to other users' private folders
          - Sid: DenyAccessToOtherUsersPrivateFolders
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Sub '${S3GalleryBucket.Arn}/private/*'
            Condition:
              StringNotEquals:
                's3:prefix': 'private/${cognito-identity.amazonaws.com:sub}/'

  # IAM Policy for additional S3 operations
  S3GalleryAdditionalPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'S3Gallery-AdditionalS3Policy-${Environment}'
      Description: 'Additional S3 permissions for S3 Gallery App'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow multipart upload operations
          - Effect: Allow
            Action:
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
              - s3:InitiateMultipartUpload
              - s3:CompleteMultipartUpload
            Resource: !Sub '${S3GalleryBucket.Arn}/private/$${cognito-identity.amazonaws.com:sub}/*'

          # Allow getting bucket location and CORS
          - Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:GetBucketCors
            Resource: !Ref S3GalleryBucket

          # Allow listing ongoing multipart uploads
          - Effect: Allow
            Action:
              - s3:ListBucketMultipartUploads
            Resource: !Ref S3GalleryBucket
            Condition:
              StringLike:
                's3:prefix': 'private/${cognito-identity.amazonaws.com:sub}/*'

  # Lambda function for S3 event processing (optional)
  S3EventProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 's3-gallery-event-processor-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('S3 Event:', JSON.stringify(event, null, 2));

            for (const record of event.Records) {
              if (record.eventSource === 'aws:s3') {
                const bucket = record.s3.bucket.name;
                const key = record.s3.object.key;
                const eventName = record.eventName;

                console.log(`S3 ${eventName}: ${bucket}/${key}`);

                // Add your processing logic here
                // For example: generate thumbnails, update database, etc.
              }
            }

            return { statusCode: 200, body: 'Processed successfully' };
          };

      Role: !GetAtt S3EventProcessorRole.Arn
      Timeout: 30
      MemorySize: 256

      Environment:
        Variables:
          S3_BUCKET: !Ref S3GalleryBucket
          ENVIRONMENT: !Ref Environment

  # IAM Role for Lambda function
  S3EventProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub '${S3GalleryBucket.Arn}/*'

  # S3 Bucket Notification to Lambda
  S3BucketNotification:
    Type: AWS::S3::Bucket
    DependsOn: S3EventProcessorFunction
    Properties:
      Bucket: !Ref S3GalleryBucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt S3EventProcessorFunction.Arn

  # Permission for S3 to invoke Lambda
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3EventProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt S3GalleryBucket.Arn

Outputs:
  S3BucketName:
    Description: 'S3 Bucket name'
    Value: !Ref S3GalleryBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'

  S3BucketArn:
    Description: 'S3 Bucket ARN'
    Value: !GetAtt S3GalleryBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketArn'

  S3BucketDomainName:
    Description: 'S3 Bucket Domain Name'
    Value: !GetAtt S3GalleryBucket.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketDomainName'

  AdditionalPolicyArn:
    Description: 'Additional S3 Policy ARN'
    Value: !Ref S3GalleryAdditionalPolicy
    Export:
      Name: !Sub '${AWS::StackName}-AdditionalPolicyArn'